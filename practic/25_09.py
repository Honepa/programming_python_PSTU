from random import randint

def first():
	print("Задание 1.")
	print("Сгенерировать, используя модуль псевдослучайных чисел `random`, или ввести с клавиатуры список целых чисел. Вывести в консоль, затем перевернуть его и снова вывести в консоль.")
	l = [randint(0, 100) for x in range(50)]
	print("Изначальный список:")
	print(l)
	print("Перевёрнутый:")
	print(l[::-1])
	print()

def second():
	print("Задание 2.")
	print("Сгенерировать, используя модуль псевдослучайных чисел `random`, или ввести с клавиатуры два списка целых чисел. Вывести их в консоль. Создать новый пустой список. Добавить в него все четные (по индексу) элементы первого списка и все нечетные (по индексу) элементы второго списка. Вывести третий список в консоль.")
	l1 = [randint(0, 100) for x in range(50)]
	l2 = [randint(0, 100) for x in range(50)]
	
	print("Первый список:")
	print(l1)
	print("Второй список:")
	print(l2)

	l3 = list()
	l3 += l1[::2]
	l3 += l2[1::2]

	print("Третий список")
	print(l3)
	print()

def third():
	print("Задание 3.")
	print("Сгенерировать, используя модуль псевдослучайных чисел `random`, или ввести с клавиатуры список произвольных элементов (целые числа, числа с плавающей точкой, строки). Вывести в консоль. Убрать из него все дубликаты через приведение типов. Вывести в консоль.")
	l = [randint(0, 10) for x in range(50)]
	print("Список изначальный:")
	print(l)

	l = list(set(l))
	print("Список без дубликатов:")
	print(l)
	print()

def fourth():
	print("Задание 4.")
	print("Сгенерировать, используя модуль псевдослучайных чисел `random`, или ввести с клавиатуры словарь, где ключом является строка, значением — целое число или число с плавающей точкой. Вывести в консоль. Для всех уникальных значений создать кортеж, где первым элементом будет значение, вторым — список связанных с ним ключей. Собрать эти кортежи в список, вывести его в консоль.")
	d = {str(randint(200,500)) : randint(0,10) for x in range(5) }

	print(d)

	d2 = [(x, [y for y in d.keys() if d[y] == x]) for x in list(set(d.values()))]
	print(d2)
	print()


if __name__ == '__main__':
	first()
	second()
	third()
	fourth()